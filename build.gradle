plugins {
    id 'com.palantir.git-version' version '0.5.3'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'application'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

apply plugin: 'maven-publish'

group 'com.programmaticallyspeaking'
version gitVersion()

project(':examples') {
    mainClassName = "com.programmaticallyspeaking.tinyws.examples.EchoServer"

    dependencies {
        compile rootProject
    }
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'org.testng:testng:6.9.10'
    testCompile "org.mockito:mockito-core:2.7.14"
    testCompile "org.java-websocket:Java-WebSocket:1.3.0"
    testCompile "org.jsoup:jsoup:1.8.3"
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
}

test {
    useTestNG()

    // Always run tests!
    outputs.upToDateWhen { false }

    // From: http://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time#answer-36130467
    testLogging {
        // set options for log level LIFECYCLE
//        events "passed", "skipped", "failed", "standardOut"
        events "passed", "skipped", "failed", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

// Delegate run to the examples project
task run(overwrite: true) {
    project(':examples').run
}

import org.apache.tools.ant.filters.ReplaceTokens

task preprocess(type: Copy) {
    from 'src/main/java'
    into 'build/preprocessed-src'
    filter(ReplaceTokens, tokens: [VERSION: version])
}

compileJava {
    dependsOn preprocess
    source = preprocess.destinationDir
}

publishing {
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}