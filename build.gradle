buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

plugins {
    id 'com.palantir.git-version' version '0.5.3'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'application'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// maven-publish cannot yet do signing
apply plugin: 'maven'
apply plugin: 'signing'

apply plugin: 'io.codearte.nexus-staging'

group 'com.programmaticallyspeaking'
version gitVersion()

project(':examples') {
    mainClassName = "com.programmaticallyspeaking.tinyws.examples.EchoServer"

    dependencies {
        compile rootProject
    }

    uploadArchives.enabled = false
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    testCompile 'org.testng:testng:6.9.10'
    testCompile "org.mockito:mockito-core:2.7.14"

    // The latest release is too old, doesn't allow us to test SSL properly.
    //testCompile "org.java-websocket:Java-WebSocket:1.3.0"
    testCompile 'com.github.TooTallNate:Java-WebSocket:937974fab706755149a6bcb04e57090425bbfc3b'

    testCompile "org.jsoup:jsoup:1.8.3"
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
}

test {
    useTestNG()

    // Always run tests!
    outputs.upToDateWhen { false }

    // From: http://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time#answer-36130467
    testLogging {
        // set options for log level LIFECYCLE
//        events "passed", "skipped", "failed", "standardOut"
        events "failed", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

// Delegate run to the examples project
task run(overwrite: true) {
    project(':examples').run
}

import org.apache.tools.ant.filters.ReplaceTokens

task preprocess(type: Copy) {
    from 'src/main/java'
    into 'build/preprocessed-src'
    filter(ReplaceTokens, tokens: [VERSION: version])
}

compileJava {
    dependsOn preprocess
    source = preprocess.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// TODO: Why does signing need this??
mainClassName = ""

signing {
    sign configurations.archives
}

// https://discuss.gradle.org/t/how-to-exclude-zip-only-from-archives-for-maven-repo-upload/13354/2
configurations.archives.with {
    artifacts.remove artifacts.find { it.archiveTask.is distZip }
    artifacts.remove artifacts.find { it.archiveTask.is distTar }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (version.contains("dirty")) {
                repository(url: "file://$buildDir/repo")
            } else if (project.hasProperty("ossrhUser") && project.hasProperty("ossrhPassword")) {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }
            }

            pom.project {
                description "Tiny WebSocket server for Java 8"
                name project.name
                url "https://github.com/provegard/tinyws"
                scm {
                    url "https://github.com/provegard/tinyws.git"
                    connection "scm:git@github.com:provegard/tinyws.git"
                    developerConnection "scm:git@github.com:provegard/tinyws.git"
                }
                licenses {
                    license {
                        name "The MIT License"
                        url "http://www.opensource.org/licenses/MIT"
                        distribution "repo"
                    }
                }
                developers {
                    developer {
                        id "provegard"
                        name "Per Roveg√•rd"
                    }
                }
            }
        }
    }
}

nexusStaging {
    if (project.hasProperty("ossrhUser") && project.hasProperty("ossrhPassword")) {
        username ossrhUser
        password ossrhPassword
    }
}